Christian's Version Control Lesson 3 Reflections

1) When would you want to use a remote repository rather than keeping all your work local?

A remote repository is good for sharing your work and collaborating with others.

2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

There might be changes from third parties you do not want to automatically be synced into you local repository. Or you come across merge conflicts because of this automatism that slow you down in your current work.

3) Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks only exist on GitHub and are the way on GitHub to clone a repository. They can be used to work on a project where you are not permitted to push changes.
Clones are copies of a repository. They are used to work on a remote project locally.
Branches are basically labels for a specific commit history. The main branch is called the master branch. A branch can be used to experiement or work on a small task without breaking the master branch of the project.

4) What is the benefit of having a copy of the last known state of the remote stored locally?

One can pull an update from the remote repository before going offline and continue the work on the current local branch without the need to merge the two branches first. It enables you to stay quickly uptodate and at the same time postpone the time consuming merge work.

5) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I could send my changes via email to my team or provide the changes on a file server. We could have meetings to discuss the changes or I just call and we discuss the changes via a screen sharing tool. Anyway, it would always involve more time and discipline to keep the workflow as clean as with git and GitHub.

6) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Small changes with very little impact on the project could be done directly on the master branch especially if there are very few people collaborating with you. Otherwise I would always prefer to make changes on a separate branch first.
