Christian's Version Control Lesson 2 Reflections

1) What happens when you initialize a repository? Why do you need to do it?

A hidden directory .git is being created. I guess this will be required to track the files that should be under version control in this git repository.

2) How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is for collecting files being added from the working directory to the git repository. It is like a preparation stage before finally making a commit to the repository.

3) How can you use the staging area to make sure you have one commit per logical change?

Only add those modified files to the staging area which belong to a single logical change.

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches could be used to experiement with new ideas or break a bigger project into smaller pieces, so the master branch would always be uncluttered and functional.

5) How do the diagrams help you visualize the branch structure?

It visualizes the relationship between the commits in a tree like structure so you can easely judge the position of a single commit and the reachability of other commits from there.

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It's one branch consisting of all changes of the merged branches. Therefore we illustrate the two branches in the diagram as the parents of the new branch.

7) What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging saves a lot of time. It prevents additional errors made by doing everything manually. Always doing merges manually on the other hand gives you full control over what will end up in the merged branch.

Commands:

git add                          |    Add a file to the staging area
git commit                       |    Commit the files from the staging area to the 
                                      repository 
git status                       |    Show which files are in the staging area, and which 
                                      files from the working directory are not part of the 
                                      repository    
git diff                         |    Git diff without arguments is comparing the working 
                                      directory with the staging area
git diff --staged                |    Compare the staging area with the repository
git reset --hard                 |    Undo all changes! There is no rollback for this, so 
                                      be carefull!
git checkout master              |    Restore the "Head" to the latest check-in (this will 
                                      be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the 
                                                    commit history within different 
                                                    branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this 
                                      branch in one call instead of git branch 
                                      new_branch_name and git checkout new_branch_name
git merge branch1 branch2        |    Merge two branches, branch2 get merged into branch1
git branch -d name               |    Remove the branch with the specified name
git show commitId                |    Show the changes made in this commit compared to the 
                                      previous version. This is working even after merging.
